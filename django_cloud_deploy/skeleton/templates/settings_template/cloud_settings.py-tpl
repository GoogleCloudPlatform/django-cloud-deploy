import json
import os
from google.cloud import storage
from google.oauth2 import service_account

from .{{ settings_module }} import *


def get_database_password():
    client = storage.Client()
    bucket = client.get_bucket('secrets-{{ project_id }}')
    blob = bucket.get_blob('secrets/cloudsql.json')
    creds = json.loads(blob.download_as_string())
    return creds['password']


def get_gs_credentials():
    if os.getenv('GAE_APPLICATION', None):
        client = storage.Client()
        bucket = client.get_bucket('secrets-{{ project_id }}')
        blob = bucket.get_blob('secrets/django-app-credentials.json')
        key_data = json.loads(blob.download_as_string().decode('utf-8'))
        info = json.loads(key_data['django-app-credentials.json'])
        return service_account.Credentials.from_service_account_info(info)

    try:  # Kubernetes Engine
        return service_account.Credentials.from_service_account_file(
            '/secrets/django_app/django-app-credentials.json')
    except:
        # When generating the files we need to run the set up code, but
        # this should not be reached when running on the platform
        return None


# SECURITY WARNING: If you deploy a Django app to production, make sure to set
# an appropriate host here.
# See https://docs.djangoproject.com/en/{{ docs_version }}/ref/settings/
ALLOWED_HOSTS = ['*']


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False


# Database
# https://docs.djangoproject.com/en/{{ docs_version }}/ref/settings/#databases
if os.getenv('GAE_APPLICATION', None):
    # Running on production App Engine, so connect to Google Cloud SQL using
    # the unix socket at /cloudsql/<your-cloudsql-connection string>
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': '{{ database_name }}',
            'USER': os.environ['DATABASE_USER'],
            'PASSWORD': get_database_password(),
            'HOST': '/cloudsql/{{ cloud_sql_connection }}',
        }
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': '{{ database_name }}',
            'USER': os.getenv('DATABASE_USER'),
            'PASSWORD': os.getenv('DATABASE_PASSWORD'),
            'HOST': '127.0.0.1',
            'PORT': os.environ.get('CLOUD_SQL_PROXY_PORT') or '5432',
        }
    }


DEFAULT_FILE_STORAGE = 'storages.backends.gcloud.GoogleCloudStorage'
GS_BUCKET_NAME = '{{ file_bucket_name }}'
GS_FILE_OVERWRITE = False
GS_CREDENTIALS = get_gs_credentials()

if 'STATIC_ROOT' not in locals():
    _BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
    STATIC_ROOT = os.path.join(_BASE_DIR, 'static')

STATIC_URL = 'https://storage.googleapis.com/{{ bucket_name }}/static/'
